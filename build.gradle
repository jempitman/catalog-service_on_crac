plugins {
	id 'java'
	id 'org.springframework.boot' version '3.0.0'
	id 'io.spring.dependency-management' version '1.1.0'
}

group = 'com.polarbookshop'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

description = 'Provides functionality for managing the books in the catalog.'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
//	compile.exclude module: 'spring-boot-starter-tomcat'
//	compile.exclude group: 'org.apache.tomcat'
}

repositories {
	mavenCentral()
}

springBoot {
	buildInfo()
}


ext{
	set('springCloudVersion', "2022.0.0")
	set('testcontainersVersion', "1.17.3")
	set('testKeycloakVersion', "2.3.0")
	set('otelVersion', "1.17.0")
	set('tomcat.version', "10.1.7")
}

dependencies {
	implementation ('org.springframework.boot:spring-boot-starter-web'){
		exclude group: 'org.apache.tomcat.embed', module: 'tomcat-embed-core'
	}
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.cloud:spring-cloud-starter-config'
	implementation 'org.springframework.retry:spring-retry'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation 'org.flywaydb:flyway-core'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'io.github.crac:org-crac:0.1.3'
	implementation 'com.zaxxer:HikariCP:2.7.6'
	implementation 'io.github.crac.org.apache.tomcat.embed:tomcat-embed-core:10.1.7'

	runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
	runtimeOnly 'org.postgresql:postgresql'
	runtimeOnly "io.opentelemetry.javaagent:opentelemetry-javaagent:${otelVersion}"
	annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

	testImplementation 'org.springframework.boot:spring-boot-starter-webflux'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.testcontainers:postgresql'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation "com.github.dasniko:testcontainers-keycloak:${testKeycloakVersion}"
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
		mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
	}
}

bootRun{
	systemProperty 'spring.profiles.active', 'testdata'
}

bootBuildImage{
	imageName = "${project.name}"
	environment = ["BP_JVM_VERSION" : "17.*"]

	docker {
		publishRegistry {
			username = project.findProperty("registryUsername")
			password = project.findProperty("registryToken")
			url = project.findProperty("registryUrl")
		}
	}
}


tasks.named('test') {
	useJUnitPlatform()
}
