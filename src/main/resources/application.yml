server:
  port: 9001
  tomcat:
    connection-timeout: 2s
    keep-alive-timeout: 15s
    threads:
        max: 50
        min-spare: 5

polar:
  greeting: Welcome to the local book catalog

management:
  endpoints:
    web:
      exposure:
        include: flyway, health, heapdump, info, prometheus
  endpoint:
    health:
      show-details: always
      show-components: always
      probes:
        enabled: true
  metrics:
    tags:
      application: ${spring.application.name}
  info:
    env:
      enabled: true
    java:
      enabled: true
    os:
      enabled: true

info:
  system: Polar Bookshop

spring:
  application:
    name: catalog-service_on_crac
  config:
    import: ""
  cloud:
    config:
      enabled: false
      uri: http://localhost:8888
      request-connect-timeout: 5000
      request-read-timeout: 5000
      fail-fast: false #toggle to true for prod env to force shut down if config server unavailable
      retry:
        max-attempts: 6
        initial-interval: 1000
        max-interval: 2000
        multiplier: 1.1
  main:
    allow-bean-definition-overriding: true
#  main:
#    allow-bean-definition-overriding=true
#  datasource:
#    username: user
#    password: password
#    url: jdbc:postgresql://localhost:5432/polardb_catalog
#    hikari:
#      connection-timeout: 2000
#      maximum-pool-size: 5
#      allow-pool-suspension: on
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://localhost:8080/realms/PolarBookshop


logging:
  pattern:
    level: "%5p [${spring.application.name},%X{trace_id},%X{span_id}]"
  level:
#    com:
#      zaxxer:
#        hikari: debug
#          HikariConfig: debug
    org:
      springframework:
        security: debug
#        context:
#          support:
#            DefaultLifecycleProcessor: debug